== Introduction ==

==== Introduction ====

* Many scientists write code regularly but few have formally been trained to do so

% you know about variables and loops
% good programs consists of so much more

* '''Best practices''' evolved from programmers folk wisdom
* They increase productivity and decrease stress

* '''Development methodologies''', such as Agile Programming and Test Driven Development, are established in the software engineering industry
* We can learn a lot from them to improve our coding skills

* When programming in Python: Always bear in mind the '''Zen of Python'''

% this means stuff that is unique  to python

== Best Practices ==

==== Outline ====

\tableofcontents[currentsection]

==== Best Practices ====

* Style and documentation
* Refactor continuously
* Do not repeat yourself (DRY Principle)
* Keep it simple (stupid) (KIS(S) Principle)
* Version control
* Unit tests

=== Style and Documentation ===

==== Coding Style ====

* Readability counts!
* Explicit is better than implicit!

* Give your variables ''intention revealing'' names
** For example: @numbers@ instead of @nu@
** For example: @numbers@ instead of @list\_of\_float\_numbers@
** See also: \href{ihttp://tottinge.blogsome.com/meaningfulnames/}{Ottingers Rules for Naming}

* Format code to coding conventions
* for example : \href{http://www.python.org/dev/peps/pep-0008/}{PEP-8}
* OR use a consistent style (especially when collaborating)
* Conventions Specify:
** Indentation, maximum line length, blank lines, import, whitespace, comments and variable naming convention

* Use automated tools (aka static checking): \href{http://www.logilab.org/857}{pylint}

==== Documenting Code ====

* Minimum requirement: at least a docstring
* These serve as help in the interpreter
* For a library, document arguments and return objects including types
* Use the numpy docstring conventions
* Use tools to automatically generated website from code: '''pydoc''' or '''sphinx'''
* For complicated algorithms, document every line, and include equations in docstring
* When your project gets bigger: provide a how-to or quickstart on your website

==== Example Docstring ====

\lstinputlisting[style=basic,language=python]{my_product_docstring.py}

=== Refactoring ===

==== Refactor Continuously ====

* As a program evolves it will become necessary to rethink earlier decisions and adapt the code accordingly

* Re-organisation of your code without changing it's function
* Increase modularity by breaking large code blocks apart
* Rename and restructure code to increase readability and reveal intention

* Always refactor one step at a time, and use the tests to check code still works
* Learn how to use automatic refactoring tools to make your life easier
** For example: '''ropeide'''

==== Example Refactoring Operations ====

* Rename class/method/module/package/function
* Move class/method/module/package/function
* Encapsulate code in method/function
* Change method/function signature
* Organize imports (remove unused and sort)

=== DRY ===

==== Do not repeat yourself (DRY Principle) ====

* When writing code, avoid duplication

* Categories of Duplication:
** Imposed Duplication
** Inadvertent Duplication
** Impatient Duplication
** Interdeveloper Duplication

* If you detect duplication in code thats already written, refactor mercilessly

==== Imposed Duplication ====

* When duplication seems to be forced on us

==== Inadvertent Duplication ====

* Accidental duplication
* Example: a line class that stores start, end ''and'' length

==== Impatient Duplication ====

* Quick copy-and-paste, instead of clean refactor
* Example: Using a literal instead of a variable for the program version number
* What happens if the original code contains a bug?
* What happens if the  original code needs to be changed?
* Be patient, invest time now to save time later!

==== Interdeveloper Duplication ====

* Repeated implementation by more than one developer
* Usually concerns utility methods
* Often caused by lack of communication
* Or lack of a module to contain utilities
* Example: Manhattan distance between two points

=== Version Control ===

==== Use Version Control ====

<[block]{Problem 1}
"Help my code worked yesterday, but I can't recall what I changed!"
[block]>

<[block]{Problem 2}
"We would like to work together, but we don't know how!"
[block]>

\hspace{6cm}

* Version control is a method to track changes in source code
* Concurrent editing is possible via merging

==== Features ====

* Revert to previous versions

* Checkpoint significant improvements

* Document developer effort
** Who changed what, when and why?

* Easy collaboration across the globe

==== Basic Version Control Workflow ====

<[figure]
    <<<images/vc_workflow.pdf, scale=0.25>>>
[figure]>


==== Some Last Thoughts ====

* Use version control for anything that's text
** Code
** Thesis
** Letters
* We will be using '''centralised''' version control, note there exists also '''decentralised''' version control
* Again, it might take a while to get used to the idea, but it will pay off rapidly.


* Questions
=== Unit Tests ===

==== Write and Run Unit Tests ====

<[block]{Definition of a ''Unit''}
* The smallest testable piece of code
* Example: @my\_product@
[block]>

* We wish to automate testing of our units
* In python we have several package available
** '''unittest''', '''nosetest''', '''pytest'''
* Simple overview today, hands on exercise tomorrow

==== Example ====

\lstinputlisting[style=basic,language=python]{my_product_test.py}

\lstinputlisting[style=basic,frame=none]{test-output}

==== Goals ====

* check code works

* check design works

* catch regression

==== Benefits ====

* Easier to test the whole, if the units work

* Can modify parts, and be sure the rest still works

* Provide examples of how to use code

==== What Makes a Good Test? ====

* independent (of each other, and of user input)

* repeatable (i.e. deterministic)

* self-contained

==== Test Suits ====

* All unit tests are collected into a test suite

* Execute the entire test suite with a single command

* Can be used to provide reports and statistics

==== Some Last Thoughts ====

* Tests increase the confidence that your code works correctly, not only for yourself but also for your reviewers
* Tests are the only way to trust your code
* It might take you a while to get used to the idea, but it will pay off quite rapidly

\hspace{4cm}

* Questions?

== Development Methodologies ==

=== Definition ===

==== Outline ====

\tableofcontents[currentsection]

==== Scenarios ====

*  Lone student/scientist

<[center]
    <<<images/lucky_luke.jpg, scale=0.30>>>
[center]>

*  Small team of scientists, working on a common library
*  Speed of development more important than execution speed

*  Often need to try out different ideas quickly:
** rapid prototyping of a proposed algorithm
** re-use/modify existing code

==== What is a Development Methodology? ====

Consist of:

* A philosophy that governs the style and approach towards development
* A set of tools and models to support the particular approach

Help answer the following questions:

* How far ahead should I plan?
* What should I prioritize?
* When do I write tests and documentation?

==== The Waterfall Model, Royce 1970 ====

<[figure][ht]
    <<<images/waterfall.pdf, scale=0.2>>>
[figure]>

* Sequential software development process
* Originates in the manufacturing and construction industries
* Rigid, inflexible model --- focusing on one stage at a time

=== Agile Methods ===

==== Agile Methods ====

* Agile methods emerged during the late 90's
* Generic name for set of more specific paradigms
* Set of ''best practices''

* Particularly suited for:
** small teams ( less than 10 people)
** unpredictable or rapidly changing requirements

==== Prominent Features of Agile methods ====

* Minimal planning, small development iterations

* design/implement/test on a modular level

* Rely heavily on testing

* Promote collaboration and teamwork

* Very adaptive, since nothing is set in stone

==== The Agile Spiral ====


<[figure]
    <<<images/agile.pdf, scale=0.2>>>
[figure]>

==== Agile methods ====

<[figure][ht]
    <<<images/dilbert-agile_programming.jpg, scale=0.45>>>
[figure]>

=== Test Driven Development ===

==== Test Driven Development (TDD) ====

<[figure]
    <<<images/testdriven.pdf, scale=0.2>>>
[figure]>

* Define unit tests first!

==== Benefits of TDD ====

* Encourages simple designes and inspires confidence
* No one ever ''forgets'' to write the unit tests
* Thinking about how to test code, means you are already thinking about how to write it

==== Outline ====

\tableofcontents[currentsection]

===  Additional techniques ===

==== Dealing with Bugs ====

* Isolate the bug (using a debugger)

* Write a unit test to expose the bug

* Fix the code, and ensure the test passes

* Use the test to catch the bug should it reappear

<[block]{Debugger}
A program to run your code one step at a time, and giving you the ability to inspect the current state, for example: '''pdb'''
[block]>

==== Dealing with Bugs ====

<[figure][ht]
    <<<images/phd_bug.jpg, scale=0.45>>>
[figure]>

==== Pair Programming ====

* Two developers, one computer
* Two roles: driver and navigator
* Driver sits at keyboard
* Navigator observes and instructs
* Switch roles every so often

==== Optimization for Speed  --- My Point of View ====

* Readable code is usually better than fast code
* Only optimize if it is absolutely necessary
* Only optimize your bottlenecks
* ...and identify these using a profiler, for example '''cprofile'''

<[block]{Profiler}
A tool to measure and provide statistics on the execution time of code.
[block]>

==== Prototyping ====

* If you are unsure how to implement something, write a prototype
* Hack together a proof of concept quickly
* No tests, no documentation
* Use this to explore the feasability of your idea
* When you are ready, scrap the prototype and start with the unit tests

== Zen of Python ==

==== The Zen of Python, an Excerpt====[containsverbatim]

<[verbatim]
>>>import this
The Zen of Python, by Tim Peters

Explicit is better than implicit.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
In the face of ambiguity, refuse the temptation to guess.
Now is better than never.
Although never is often better than *right* now.
[verbatim]>

== Conclusion ==

==== Outline ====

\tableofcontents[currentsection]

==== Results ====

* Every scientific result (especially if important) should be independently reproduced at least internally before publication. (German Research Council 1999)

* Increasing pressure to make the source used in publications available

\hspace{10cm}

* With unit tested code you need not be embarrassed to publish your code

* Using version control allows you to share and collaborate easily

==== Links ====

* unittest, nosetest, pytest
* pdb, pylint, rope and ropeide
* sphinx, epydoc

==== The Last Slide ====

* Open source tools used to make this presentation:
** wiki2beamer
** \LaTeX beamer
** dia

\hspace{10cm}

Questions ?

