<!-- unused slides -->

== Unit Testing ==

==== How to Test ? ====

* Test with simple cases, using hard coded solutions
** @my\_sum([1,2,3]) == 6@

* Test special or boundary cases
** @my\_sum([]) == 0@

* Test that meaningful error messages are raised upon corrupt input
** @my\_sum(['1', 'a'])@ 
** --> @TypeError: unsupported operand type(s) for +: 'int' and 'str'@

==== Stuff That's Harder to Test ====

Probabilistic code
* Use toy examples as validation
* Consider fixing the seed for your pseudo random number generator

Hardware
* use mock up software that behaves like the hardware should

Plots
* (any creative ideas welcome)

==== Example ====

<[center]
<<<images/define_test.pdf, scale=0.25>>>

\hspace{10cm}

function @my\_sum@ should return the sum of a list.

[center]>

== Agile Methods ==

==== Example ====

<[center]
<<<images/simplest_version.pdf, scale=0.25>>>


\hspace{10cm}

<[code][style=basic, language=Python]
def my_sum(my_list):
    """ Compute sum of list elements. """
    answer = 0
    for item in my_list:
        answer = answer + item
    return answer
[code]>

[center]>

==== Example ====

<[center]
<<<images/ensure_test.pdf, scale=0.25>>>

\hspace{10cm}

<[code][style=basic, language=Python]
>>> my_sum(\[1,2,3\]) 
6 
[code]>

[center]>

==== Example ====

<[center]
<<<images/better_version.pdf, scale=0.25>>>

\hspace{10cm}

<[code][style=basic, language=Python]
def my_sum(my_list):
    """ Compute sum of list elements. """
    return sum(my_list)
[code]>

[center]>

== Version Control ==

==== Where the Versions are Stored? ====

<[figure][ht]
    <<<images/central.pdf, scale=0.25>>>
[figure]>

* '''repository''' is located on a server
* Developers must connect to this server

==== Contents of the Repository ====

<[figure]
    <<<images/repository.pdf, scale=0.25>>>
[figure]>


==== What Will We Use ? ====

* Many different systems available

* We will use the de-facto standard:

<[figure][ht]
    <<<images/Subversion_logo.pdf, scale=0.3>>>
[figure]>
